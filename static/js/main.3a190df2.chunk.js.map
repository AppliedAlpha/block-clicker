{"version":3,"sources":["custom.js","components/Test.js","components/Upgrader.js","components/Upgrade.js","components/Game.js","components/App.js","index.js"],"names":["useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","max","val1","val2","Test","setBpc","setBps","onClick","bpc","bps","Upgrader","name","price","addBps","buy","useState","nowPrice","setNowPrice","val","Math","round","Upgrade","blocksCount","setBlocksCount","cnt","window","alert","Game","setDelay","tickBps","setTickBps","value","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a190df2.chunk.js","sourcesContent":["import {useEffect, useRef} from \"react\";\r\n\r\nfunction useInterval(callback, delay) {\r\n    const savedCallback = useRef();\r\n\r\n    useEffect(() => {\r\n        savedCallback.current = callback;\r\n    });\r\n\r\n    useEffect(() => {\r\n        function tick() {\r\n            savedCallback.current();\r\n        }\r\n\r\n        if (delay !== null) {\r\n            let id = setInterval(tick, delay);\r\n            return () => clearInterval(id);\r\n        }\r\n    }, [delay]);\r\n}\r\n\r\nexport default useInterval;","import React from \"react\";\r\n\r\nconst max = (val1, val2) => { return val1 > val2 ? val1 : val2 };\r\n\r\nconst Test = ({setBpc, setBps}) => {\r\n    const increaseBpc = () => {\r\n        setBpc(bpc => bpc + 1);\r\n    };\r\n\r\n    const increaseBps = () => {\r\n        setBps(bps => bps + 1);\r\n    };\r\n\r\n    const decreaseBpc = () => {\r\n        setBpc(bpc => max(bpc - 1, 0));\r\n    };\r\n\r\n    const decreaseBps = () => {\r\n        setBps(bps => max(bps - 1, 0));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <button onClick={increaseBpc}>Increase BPC</button>\r\n            <button onClick={increaseBps}>Increase BPS</button>\r\n            <button onClick={decreaseBpc}>Decrease BPC</button>\r\n            <button onClick={decreaseBps}>Decrease BPS</button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Test;","import React, { useState } from \"react\";\r\n\r\nconst Upgrader = ({ name, price, addBps, buy }) => {\r\n    const [nowPrice, setNowPrice] = useState(price);\r\n\r\n    const onClick = () => {\r\n        if (!buy(nowPrice, addBps)) {\r\n            setNowPrice(val => Math.round(val * 1.1));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <p>{name}: -{nowPrice} Blocks, +{addBps} BPS</p>\r\n                <button onClick={onClick}>Buy!</button>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Upgrader;","import React from \"react\";\r\nimport Upgrader from \"components/Upgrader\";\r\n\r\nconst Upgrade = ({ blocksCount, setBlocksCount, setBps }) => {\r\n    const buy = (price, addBps) => {\r\n        if (blocksCount >= price) {\r\n            setBlocksCount(cnt => cnt - price);\r\n            setBps(val => Math.round((val + addBps) * 10) / 10);\r\n            return 0;\r\n        }\r\n        else {\r\n            window.alert(\"Block is not enough!\");\r\n            return 1;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <Upgrader name=\"Hand\" price={20} addBps={0.2} buy={buy} />\r\n                <Upgrader name=\"Pickaxe\" price={100} addBps={1} buy={buy} />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Upgrade;","import React, { useEffect, useState } from \"react\";\r\nimport useInterval from \"custom\";\r\nimport Test from \"components/Test\";\r\nimport Upgrade from \"components/Upgrade\";\r\n\r\nconst Game = () => {\r\n    const [blocksCount, setBlocksCount] = useState(0);\r\n    const [delay, setDelay] = useState(1000);\r\n    const [bpc, setBpc] = useState(1);\r\n    const [bps, setBps] = useState(0);\r\n    const [tickBps, setTickBps] = useState(0);\r\n    const [blockTier, setBlockTier] = useState(0);\r\n    // const [imgRoute, setImgRoute] = useState(\"imgs/0.png\");\r\n\r\n    useEffect(() => {\r\n        if (bps >= 60) {\r\n            setTickBps(Math.round(bps / 60));\r\n            setDelay(1000 / 60);\r\n        }\r\n        else if (bps > 0) {\r\n            setTickBps(1);\r\n            setDelay(1000 / bps);\r\n        }\r\n    }, [bps]);\r\n\r\n    // Automatic (Blocks Per Second)\r\n    useInterval(() => {\r\n        setBlocksCount(value => Math.round((value + tickBps) * 10) / 10);\r\n    }, (tickBps > 0 ? delay : null));\r\n\r\n    // Manual (Blocks Per Click)\r\n    const onBlockClick = () => {\r\n        setBlocksCount(value => value + bpc);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <p>Your Blocks: {blocksCount}</p>\r\n            <span onClick={onBlockClick}>\r\n                <button>I'm A Block Button.</button>\r\n            </span>\r\n            <p>Blocks Per Click : {bpc}</p>\r\n            <p>Blocks Per Second : {bps}</p>\r\n            <Upgrade blocksCount={blocksCount} setBlocksCount={setBlocksCount} setBps={setBps} />\r\n            <p></p>\r\n            <Test setBpc={setBpc} setBps={setBps} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Game;","import React from \"react\"\r\nimport Game from \"components/Game\"\r\n\r\nconst App = () => {\r\n    return (\r\n        <>\r\n            <Game />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"components/App\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}